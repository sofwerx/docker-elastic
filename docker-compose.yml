---
version: '3'
services:
  # The environment variable "ELASTICSEARCH_VERSION" is used throughout this file to
  # specify the version of the images to run. The default is set in the
  # '.env' file in this folder. It can be overridden with any normal
  # technique for setting environment variables, for example:
  #
  #   ELASTICSEARCH_VERSION=6.0.0-beta1 docker-compose up
  #
  # REF: https://docs.docker.com/compose/compose-file/#variable-substitution
  #
  # Also be sure to set the ELASTIC_VERSION variable. For released versions,
  # ${ELASTICSEARCH_VERSION} and ${ELASTIC_VERSION} will be identical, but for pre-release
  # versions, ${ELASTICSEARCH_VERSION} might contain an extra build identifier, like
  # "6.0.0-beta1-3eab5b40", so a full invocation might look like:
  #
  #   ELASTIC_VERSION=6.0.0-beta1 ELASTICSEARCH_VERSION=6.0.0-beta1-3eab5b40 docker-compose up
  #
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-platinum:${ELASTICSEARCH_VERSION}
    container_name: elasticsearch
    environment: ['http.host=0.0.0.0', 'transport.host=127.0.0.1', 'ELASTIC_PASSWORD=${ELASTIC_PASSWORD}']
    ports: ['127.0.0.1:9200:9200']
#    networks: ['stack']

  kibana:
    image: docker.elastic.co/kibana/kibana:${ELASTICSEARCH_VERSION}
    container_name: kibana
    environment:
      - ELASTICSEARCH_USERNAME=kibana
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
    ports: ['127.0.0.1:5601:5601']
#    networks: ['stack']
    depends_on: ['elasticsearch']

  logstash:
    build:
      context: .
      args:
        ELASTICSEARCH_VERSION: ${ELASTICSEARCH_VERSION}
      dockerfile: Dockerfile.logstash
    image: sofwerx/logstash:${ELASTICSEARCH_VERSION}
    container_name: logstash
    environment:
      - 'xpack.monitoring.elasticsearch.password=${ELASTIC_PASSWORD}'
#    networks: ['stack']
    depends_on: ['elasticsearch', 'setup_logstash']

  auditbeat:
    image: docker.elastic.co/beats/auditbeat:${ELASTICSEARCH_VERSION}
    container_name: auditbeat
    command: >-
      -e
      -E 'output.elasticsearch.hosts=["elasticsearch:9200"]'
      -E 'output.elasticsearch.username=${ELASTIC_USER}'
      -E 'output.elasticsearch.password=${ELASTIC_PASSWORD}'
    cap_add: ['AUDIT_CONTROL', 'AUDIT_READ']
    # Auditbeat must run in the main process namespace.
    pid: host
#    networks: ['stack']
    depends_on: ['elasticsearch']

  filebeat:
    image: docker.elastic.co/beats/filebeat:${ELASTICSEARCH_VERSION}
    container_name: filebeat
    command: >-
      -e
      -E 'output.elasticsearch.hosts=["elasticsearch:9200"]'
      -E 'output.elasticsearch.username=${ELASTIC_USER}'
      -E 'output.elasticsearch.password=${ELASTIC_PASSWORD}'
    # If the host system has logs at "/var/log", mount them at "/mnt/log"
    # inside the container, where Filebeat can find them.
    # volumes: ['/var/log:/mnt/log:ro']
#    networks: ['stack']
    depends_on: ['elasticsearch', 'setup_filebeat']

  heartbeat:
    image: docker.elastic.co/beats/heartbeat:${ELASTICSEARCH_VERSION}
    container_name: heartbeat
    command: >-
      -e
      -E 'output.elasticsearch.hosts=["elasticsearch:9200"]'
      -E 'output.elasticsearch.username=${ELASTIC_USER}'
      -E 'output.elasticsearch.password=${ELASTIC_PASSWORD}'
#    networks: ['stack']
    depends_on: ['elasticsearch', 'setup_heartbeat']

  metricbeat:
    build:
      context: .
      args:
        ELASTICSEARCH_VERSION: ${ELASTICSEARCH_VERSION}
      dockerfile: Dockerfile.metricbeat
    image: sofwerx/metricbeat:${ELASTICSEARCH_VERSION}
    container_name: metricbeat
    # The commented sections below enable Metricbeat to monitor the Docker host,
    # rather than the Metricbeat container. It's problematic with Docker for
    # Windows, however, since "/proc", "/sys" etc. don't exist on Windows.
    # The same likely applies to OSX (needs testing).
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /:/hostfs:ro
    command: >-
      -e
      -E 'output.elasticsearch.hosts=["elasticsearch:9200"]'
      -E 'output.elasticsearch.username=${ELASTIC_USER}'
      -E 'output.elasticsearch.password=${ELASTIC_PASSWORD}'
      -system.hostfs=/hostfs
#    networks: ['stack']
    depends_on: ['elasticsearch', 'setup_metricbeat']

  packetbeat:
    image: docker.elastic.co/beats/packetbeat:${ELASTICSEARCH_VERSION}
    container_name: packetbeat
    # Packetbeat needs some elevated privileges to capture network traffic.
    # We'll grant them with POSIX capabilities.
    cap_add: ['NET_RAW', 'NET_ADMIN']
    # Use "host mode" networking to allow Packetbeat to capture traffic from
    # the real network interface on the host, rather than being isolated to the
    # container's virtual interface.
    network_mode: host
    # Since we did that, Packetbeat is not part of the "stack" Docker network
    # that the other containers are connected to, and thus can't resolve the
    # hostname "elasticsearch". Instead, we'll tell it to find Elasticsearch
    # on "localhost", which is the Docker host machine in this context.
    command: >-
      -e
      -E 'output.elasticsearch.hosts=["elasticsearch:9200"]'
      -E 'output.elasticsearch.username=${ELASTIC_USER}'
      -E 'output.elasticsearch.password=${ELASTIC_PASSWORD}'
    depends_on: ['elasticsearch']

  apm_server:
    image: docker.elastic.co/apm/apm-server:${ELASTICSEARCH_VERSION}
    container_name: apm_server
    ports: ['127.0.0.1:8200:8200']
#    networks: ['stack']
    command: >-
      -e
      -E 'output.elasticsearch.hosts=["elasticsearch:9200"]'
      -E 'output.elasticsearch.username=${ELASTIC_USER}'
      -E 'output.elasticsearch.password=${ELASTIC_PASSWORD}'
    depends_on: ['elasticsearch','setup_apm_server']

  # Run a short-lived container to set up Logstash.
  setup_logstash:
    build:
      context: .
      args:
        ELASTICSEARCH_VERSION: ${ELASTICSEARCH_VERSION}
      dockerfile: Dockerfile.setup_logstash
    image: local/setup_logstash:${ELASTICSEARCH_VERSION}
    container_name: setup_logstash
    environment: ['ELASTIC_PASSWORD=${ELASTIC_PASSWORD}']
#    networks: ['stack']
    depends_on: ['elasticsearch']

  setup_kibana:
    build:
      context: .
      args:
        ELASTICSEARCH_VERSION: ${ELASTICSEARCH_VERSION}
      dockerfile: Dockerfile.setup_kibana
    image: local/setup_kibanan:${ELASTICSEARCH_VERSION}
    container_name: setup_kibana
    environment: ['ELASTIC_PASSWORD=${ELASTIC_PASSWORD}']
#    networks: ['stack']
    depends_on: ['elasticsearch']

  setup_auditbeat:
    build:
      context: .
      args:
        ELASTICSEARCH_VERSION: ${ELASTICSEARCH_VERSION}
      dockerfile: Dockerfile.setup_auditbeat
    image: local/auditbeat:${ELASTICSEARCH_VERSION}
    container_name: setup_auditbeat
    environment: ['ELASTIC_PASSWORD=${ELASTIC_PASSWORD}']
    cap_add:
      - AUDIT_CONTROL
      - AUDIT_READ
    # Auditbeat must run in the main process namespace.
    pid: host
#    networks: ['stack']
    depends_on: ['kibana']

  setup_filebeat:
    build:
      context: .
      args:
        ELASTICSEARCH_VERSION: ${ELASTICSEARCH_VERSION}
      dockerfile: Dockerfile.setup_filebeat
    image: local/filebeat:${ELASTICSEARCH_VERSION}
    container_name: setup_filebeat
    environment: ['ELASTIC_PASSWORD=${ELASTIC_PASSWORD}']
#    networks: ['stack']
    depends_on: ['kibana']

  setup_heartbeat:
    build:
      context: .
      args:
        ELASTICSEARCH_VERSION: ${ELASTICSEARCH_VERSION}
      dockerfile: Dockerfile.setup_heartbeat
    image: local/heartbeat:${ELASTICSEARCH_VERSION}
    container_name: setup_heartbeat
    environment: ['ELASTIC_PASSWORD=${ELASTIC_PASSWORD}']
#    networks: ['stack']
    depends_on: ['kibana']

  setup_metricbeat:
    build:
      context: .
      args:
        ELASTICSEARCH_VERSION: ${ELASTICSEARCH_VERSION}
      dockerfile: Dockerfile.setup_metricbeat
    image: local/metricbeat:${ELASTICSEARCH_VERSION}
    container_name: setup_metricbeat
    environment: ['ELASTIC_PASSWORD=${ELASTIC_PASSWORD}']
#    networks: ['stack']
    depends_on: ['kibana']

  setup_packetbeat:
    build:
      context: .
      args:
        ELASTICSEARCH_VERSION: ${ELASTICSEARCH_VERSION}
      dockerfile: Dockerfile.setup_packetbeat
    image: local/packetbeat:${ELASTICSEARCH_VERSION}
    container_name: setup_packetbeat
    cap_add: ['NET_RAW', 'NET_ADMIN']
    environment: ['ELASTIC_PASSWORD=${ELASTIC_PASSWORD}']
#    networks: ['stack']
    depends_on: ['kibana']

  setup_apm_server:
    build:
      context: .
      args:
        ELASTICSEARCH_VERSION: ${ELASTICSEARCH_VERSION}
      dockerfile: Dockerfile.setup_apm_server
    image: local/apm-server:${ELASTICSEARCH_VERSION}
    container_name: setup_apm_server
    environment: ['ELASTIC_PASSWORD=${ELASTIC_PASSWORD}']
#    networks: ['stack']
    depends_on: ['elasticsearch','kibana']

#networks: {stack: {}}
